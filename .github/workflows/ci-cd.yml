name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - ai_api
  pull_request:
    branches:
      - main
      - develop

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ========================================
  # Test Job
  # ========================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests with pytest
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          BASIC_AUTH_USERNAME: test
          BASIC_AUTH_PASSWORD: test
          FLASK_ENV: testing
        run: |
          pytest -v --tb=short
      
      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql+psycopg2://test:test@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          BASIC_AUTH_USERNAME: test
          BASIC_AUTH_PASSWORD: test
          FLASK_ENV: testing
        run: |
          pytest --cov=app --cov-report=term-missing --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # ========================================
  # Lint Job
  # ========================================
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff black isort
      
      - name: Run ruff
        run: ruff check . --output-format=github || true
      
      - name: Run black (check only)
        run: black --check . || true
      
      - name: Run isort (check only)
        run: isort --check-only . || true

  # ========================================
  # Build Docker Image
  # ========================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ========================================
  # Deploy Job (Optional - for main branch)
  # ========================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://your-app-url.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to EC2 (placeholder)
        run: |
          echo "Deployment step - configure with your deployment method"
          echo "Options: AWS ECS, EC2 with SSH, Kubernetes, etc."
          # Example SSH deployment:
          # ssh -i ${{ secrets.EC2_SSH_KEY }} ec2-user@your-server 'cd /var/www/app && git pull && docker-compose up -d'
